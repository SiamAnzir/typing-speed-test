{"version":3,"sources":["img/profilepic.png","components/TextBox.js","components/ResultBox.js","components/Modal.js","components/Navbar.js","components/Sidebar.js","hooks/useModal.js","hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","textBox","props","react_default","a","createElement","className","count","ref","textInput","disabled","status","type","onKeyDown","handleKeyUpdate","value","currentValue","onChange","e","setCurrentValue","target","onClick","countDownStart","index_es","icon","faArrowsRotate","style","marginRight","words","map","word","index","key","split","char","i","setCharClass","resultBox","faSquarePollHorizontal","borderRight","faCircleCheck","color","correctWord","currentResult","correctWords","faCircleXmark","incorrectWord","inCorrectWords","borderTop","faGaugeSimpleHigh","WPM","faPercent","Accuracy","faSquarePollVertical","averageWpm","Modal","_ref","isShowing","modalHandleSubmit","modalInputChange","profileName","ReactDOM","createPortal","Fragment","aria-modal","aria-hidden","tabIndex","role","onSubmit","src","profile","alt","height","width","required","placeholder","minLength","document","body","navbar","faKeyboard","faUser","Chart","register","apply","Object","toConsumableArray","registerables","Sidebar","bestAccuracy","info","length","Math","max","result","bestWpm","_useState","useState","_useState2","slicedToArray","showing","setShowing","totalWords","correctWordPercentage","round","inCorrectWordPercentage","data","labels","keys","correctChar","datasets","label","values","backgroundColor","faIdBadge","image","dist","options","responsive","plugins","legend","position","title","display","text","hoverOffset","paddingRight","gamePlayed","averageAccuracy","paddingLeft","faForward","useModal","setIsShowing","toggle","useLocalStorage","initialValue","localValue","window","localStorage","getItem","JSON","parse","error","setValue","useEffect","setItem","stringify","App","accuracy","wpm","numberOfChar","runningTime","setWords","_useState3","_useState4","setCount","_useState5","_useState6","_useState7","_useState8","currentWordIndex","setCurrentWordIndex","_useState9","_useState10","currentChar","setCurrentChar","_useState11","_useState12","currentCharIndex","setCurrentCharIndex","_useState13","_useState14","correctEntity","setCorrectEntity","_useState15","_useState16","setCorrectWord","_useState17","_useState18","setIncorrectWord","_useState19","_useState20","setStatus","_useLocalStorage","_useLocalStorage2","setProfile","_useLocalStorage3","_useLocalStorage4","numberOfTest","setNumberOfTest","newTestResult","correctEntry","_useLocalStorage5","_useLocalStorage6","setInfo","_useState21","_useState22","setCurrentResult","_useLocalStorage7","_useLocalStorage8","setCorrectChar","_useState23","_useState24","setNumberOfChar","useRef","_useModal","_useState25","_useState26","setRunningTime","createWords","current","focus","concat","Array","fill","randomWords","checkWord","trim","totalCorrectWords","reduce","total","letter","sum","totalIncorrectWords","sumOfWpm","sumOfAccuracy","components_Modal","event","Navbar","TextBox","keyCode","interval","setInterval","prevCount","clearInterval","wordIndex","charIndex","ResultBox","components_Sidebar","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.9c53da45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepic.d79e75b7.png\";","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faArrowsRotate,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst textBox = (props) => {\n    return(\n        <div>\n            <div className=\"text-box\">\n                <div className=\"header-row\">\n                    <div className=\"header-column\">\n                        <p className=\"counter\">\n                            {(props.count < 10) ? ( \"00:0\"+props.count ) : (\"00:\"+props.count)}\n                        </p>\n                    </div>\n                    <div className=\"header-column\">\n                        <input className=\"input-field\" ref={props.textInput} disabled={props.status !== \"started\"} type=\"text\" onKeyDown={props.handleKeyUpdate} value={props.currentValue} onChange={(e) => props.setCurrentValue(e.target.value)}/>\n                    </div>\n                    <div className=\"header-column\">\n                        <button className=\"start-button\" onClick={props.countDownStart}>\n                            <FontAwesomeIcon icon={faArrowsRotate} style={{ marginRight: '.5rem' }}/>\n                            {\n                                (props.status === \"finished\") ? (\n                                    \"Restart\"\n                                ) : (\n                                    \"Start\"\n                                )\n                            }\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {props.words.map((word,index) => (\n                        <span key={index}>\n                <span>\n                  {word.split(\"\").map((char,i) => (\n                      <span className={props.setCharClass(index,i,char)} key={i}>{char}</span>\n                  ))}\n                </span>\n                <span> </span>\n              </span>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default textBox;","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faSquarePollHorizontal,\n    faSquarePollVertical,\n    faCircleCheck,\n    faCircleXmark, faPercent,faGaugeSimpleHigh\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst resultBox = (props) => {\n    return(\n        <div>\n            <div className=\"result-box\">\n                <div className=\"result-header\">\n                    <h1><FontAwesomeIcon icon={faSquarePollHorizontal}  style={{ marginRight: '.5rem' }}/>Current Result</h1>\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\" style={{borderRight:'2px solid #003366'}}>\n                        <h4><FontAwesomeIcon icon={faCircleCheck} style={{ marginRight: '.2rem' }} color=\"green\"/>Correct Words</h4>\n                        <h4>{(props.correctWord !== 0) ? (\n                            props.currentResult.correctWords\n                        ) : (props.correctWord)}</h4>\n                    </div>\n                    <div className=\"column\">\n                        <h4><FontAwesomeIcon icon={faCircleXmark} style={{ marginRight: '.2rem' }} color=\"red\"/>InCorrect Words</h4>\n                        <h4>{(props.incorrectWord !== 0) ? (\n                            props.currentResult.inCorrectWords\n                        ) : (props.incorrectWord)}</h4>\n                    </div>\n                </div>\n                <div className=\"row\" style={{borderTop:'2px solid #003366'}}>\n                    <div className=\"column\" style={{borderRight:'2px solid #003366'}}>\n                        <h4><FontAwesomeIcon icon={faGaugeSimpleHigh} style={{ marginRight: '.2rem' }}/>WPM</h4>\n                        <h4>{(props.correctWord !== 0) ? (\n                            props.currentResult.WPM\n                        ) : (\n                            0\n                        )}</h4>\n                    </div>\n                    <div className=\"column\">\n                        <h4><FontAwesomeIcon icon={faPercent} style={{ marginRight: '.2rem'}}/>Accuracy</h4>\n                        <h4>\n                            {(props.correctWord !== 0 ? (\n                                props.currentResult.Accuracy + \"%\"\n                            ) : (\n                                \"0%\"\n                            ))}\n                        </h4>\n                    </div>\n                </div>\n            </div>\n            <div className=\"avg-result-box\">\n                <div className=\"result-header\">\n                    <h3><FontAwesomeIcon icon={faSquarePollVertical} style={{ marginRight: '.5rem' }}/>Average Typing Speed</h3>\n                </div>\n                <div>\n                    <h4>{props.averageWpm}</h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default resultBox;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport profile from '../img/profilepic.png';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleCheck} from \"@fortawesome/free-regular-svg-icons\";\n\nconst Modal = ({ isShowing, modalHandleSubmit,modalInputChange,profileName }) => (isShowing) ? ReactDOM.createPortal(\n    <>\n        <div className=\"modal-overlay\"/>\n        <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\n            <div className=\"modal\">\n                <form onSubmit={modalHandleSubmit}>\n                    <div>\n                        <img src={profile} alt=\"profile\" style={{height:'300px',width:'320px'}}/>\n                    </div>\n                    <label>Type Your Full Name</label>\n                    <input className=\"modal-input-field\" required type=\"text\" placeholder=\"Profile Name....\" minLength=\"8\" value={(profileName === \"\") ? (\"\") : (profileName)} onChange={modalInputChange}/>\n                    <button className=\"modal-button\" type=\"submit\"><FontAwesomeIcon icon={faCircleCheck} style={{ marginRight: '.2rem' }}/>Submit</button>\n                </form>\n            </div>\n        </div>\n    </>, document.body\n) : null;\n\n\nexport default Modal;\n\n/**\n * <div className=\"modal-header\">\n *                     <button type=\"button\" className=\"modal-close-button\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hide}>\n *                         <span aria-hidden=\"true\">&times;</span>\n *                     </button>\n *                 </div>\n *                 padding: 15px 32px;**/","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\";\nimport {faKeyboard} from \"@fortawesome/free-regular-svg-icons\";\n\nconst navbar = (props) => {\n    return(\n        <ul className=\"navbar-class\">\n            <li className=\"project-name\">\n                <FontAwesomeIcon icon={faKeyboard}/> Typing Speed Test\n            </li>\n            <li className=\"profile-name\"> <FontAwesomeIcon icon={faUser} style={{ marginRight: '.8rem' }}/>\n                {(props.profileName === \"\") ? (\"Profile Name\") : (props.profileName) }\n            </li>\n        </ul>\n    )\n}\n\nexport default navbar;","import React, {useState} from \"react\";\nimport image from \"../img/profilepic.png\";\nimport {Bar,Doughnut} from \"react-chartjs-2\";\nimport { Chart, registerables } from 'chart.js';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faIdBadge,\n    faSquarePollVertical,\n    faForward\n} from \"@fortawesome/free-solid-svg-icons\";\nChart.register(...registerables);\n\nconst Sidebar = (props) => {\n    const bestAccuracy = (props.info.length < 1) ? (\"0\") : (Math.max(...props.info.map(result => result.Accuracy)));\n    const bestWpm = (props.info.length < 1) ? (\"0\") : (Math.max(...props.info.map(result => result.WPM)));\n    const [showing, setShowing] = useState(false);\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: ' Correct Entity Stat',\n            },\n        },\n    };\n    const totalWords = (props.correctWord + props.incorrectWord);\n    const correctWordPercentage =Math.round(((props.correctWord/totalWords) * 100));\n    const inCorrectWordPercentage =Math.round(((props.incorrectWord/totalWords) * 100));\n    const labels = (Object.keys(props.correctChar).length !== 0) ? (Object.keys(props.correctChar)) : ([\"no-data-available\"]);\n    const data = {\n        labels,\n        datasets: [\n            {\n                label: 'Number of Correct Entry',\n                data: (Object.values(props.correctChar).length !== 0) ? (Object.values(props.correctChar)) : ([\"no-data-available\"]),\n                backgroundColor: 'rgba(0, 0,255, 0.5)',\n            },\n        ],\n    };\n    return(\n        (showing) ?\n            (<div className=\"sidebar\">\n                <button onClick={() => setShowing(false)}>x</button>\n                <div className=\"sidebar-row\">\n                    <div className=\"sidebar-column\">\n                        <h2><FontAwesomeIcon icon={faIdBadge} style={{marginRight:'.2rem'}}/>Profile Intro</h2>\n                        <img src={image} alt=\"profile\" style={{height:\"180px\",width:\"180px\"}}/>\n                        <br/>\n                        <p><b>{props.profileName}</b></p>\n                    </div>\n                    <div className=\"sidebar-column\">\n                        <Bar options={options} data={data} style={{height:'580px',width:'580px'}}/>\n                    </div>\n                    <div className=\"sidebar-column\">\n                        {(totalWords === 0) ? (<div></div>) : (\n                            <>\n                                <Doughnut\n                                    data = {{\n                                        labels:['Correct Words', 'InCorrect Words'],\n                                        datasets: [{\n                                            label: 'Total Words',\n                                            data: [correctWordPercentage,inCorrectWordPercentage],\n                                            backgroundColor: [\n                                                'rgba(0, 255, 0, 0.5)',\n                                                'rgba(255,0, 0, 0.5)'\n                                            ],\n\n                                            hoverOffset: 4\n                                        }]\n                                    }}\n                                    style={{height:'250px',width:'250px'}}\n                                />\n                                <ul>\n                                    <li style={{color:'green'}}>Correct Words: {correctWordPercentage}%</li>\n                                    <li style={{color:'red'}}>InCorrect Words: {inCorrectWordPercentage}%</li>\n                                </ul>\n                            </>\n                        )}\n                    </div>\n                    <div className=\"sidebar-column\">\n                        <h2><FontAwesomeIcon icon={faSquarePollVertical} style={{marginRight:'.2rem'}}/>Full Statistics </h2>\n                        <div style={{paddingRight:'10px'}}>\n                            <ul>\n                                <li><b>Number of Tests: {props.gamePlayed}</b></li>\n                            </ul>\n                            <ul>\n                                <li style={{color:'green'}}><b>Total Correct Words: {props.correctWord}</b></li>\n                            </ul>\n                            <ul>\n                                <li style={{color:'red'}}><b>Total InCorrect Words: {props.incorrectWord}</b></li>\n                            </ul>\n                            <ul>\n                                <li><b>Highest Accuracy: {bestAccuracy}%</b></li>\n                            </ul>\n                            <ul>\n                                <li><b>Average Accuracy: {props.averageAccuracy}%</b></li>\n                            </ul>\n                            <ul>\n                                <li><b>Highest Speed(WPM) : {bestWpm}</b></li>\n                            </ul>\n                            <ul>\n                                <li><b>Average Speed(WPM): {props.averageWpm}</b></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>) :\n            (\n                <div className=\"sideNavBtn\">\n                    <button className=\"full-stat-button\" onClick={() => setShowing(true)} type=\"submit\">\n                        <span style={{paddingLeft:'5px'}}>See </span>\n                        <span> <FontAwesomeIcon icon={faForward}/> Full Stats </span>\n                    </button>\n                </div>\n            )\n    )\n}\n\nexport default Sidebar;\n\n","import { useState } from 'react';\n\nconst useModal = () => {\n    const [isShowing, setIsShowing] = useState(true);\n\n    const toggle = () => {\n        setIsShowing(false);\n    }\n\n    return {\n        isShowing,\n        toggle,\n    }\n};\n\nexport default useModal;","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n    const [value, setValue] = useState(() => {\n        try {\n            const localValue = window.localStorage.getItem(key);\n            return localValue ? JSON.parse(localValue) : initialValue;\n        } catch (error) {\n            return initialValue;\n        }\n    });\n\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n\n    return [value, setValue];\n};\n\nexport default useLocalStorage;","import './App.css';\nimport React, {useState,useEffect,useRef} from \"react\";\nimport randomWords from \"random-words\";\nimport TextBox from \"./components/TextBox\";\nimport ResultBox from \"./components/ResultBox\";\nimport Modal from \"./components/Modal\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nimport useModal from \"./hooks/useModal\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nconst App = () => {\n  const time = 60;\n\n  const accuracy = (correctWord,incorrectWord) => {\n    return Math.round((correctWord / (correctWord + incorrectWord)) * 100)\n  };\n  const wpm = (numberOfChar,runningTime) => {\n    return Math.round((numberOfChar/5)/runningTime)\n  };\n\n  const [words,setWords] = useState([]);\n  const [count,setCount] = useState(time);\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentChar, setCurrentChar] = useState(\"\");\n  const [currentCharIndex, setCurrentCharIndex] = useState(-1);\n  const [correctEntity,setCorrectEntity] = useState([]);\n  const [correctWord, setCorrectWord] = useState(0);\n  const [incorrectWord, setIncorrectWord] = useState(0);\n  const [status,setStatus] = useState(\"watching\");\n  const [profile,setProfile] = useLocalStorage('name',\"\");\n  const [numberOfTest,setNumberOfTest] = useLocalStorage('Game Played',0);\n  const newTestResult = {\n    correctWords:correctWord,\n    inCorrectWords:incorrectWord,\n    WPM:wpm(correctWord,incorrectWord),\n    Accuracy:accuracy(correctWord,incorrectWord)\n  }\n  const correctEntry = {}\n  const [info,setInfo] = useLocalStorage('userInfo',[]);\n  const [currentResult,setCurrentResult] = useState(newTestResult);\n  const [correctChar,setCorrectChar] = useLocalStorage('Correct-Char','');\n  const [numberOfChar,setNumberOfChar] = useState(0);\n  const textInput = useRef(null);\n  const {isShowing, toggle} = useModal();\n  const [runningTime,setRunningTime] = useState(0);\n\n  useEffect(() =>{\n    setWords(createWords);\n  },[]);\n\n  useEffect(() => {\n    if(status === \"started\"){\n      textInput.current.focus()\n    }\n  },[status]);\n\n  useEffect(() => {\n    if(status === \"finished\"){\n      setInfo([...info,currentResult]);\n      setCorrectChar(correctEntry);\n    }\n  },[status]);\n\n  const createWords = () => {\n    return new Array(240).fill(null).map(() => randomWords())\n  }\n  const countDownStart = () => {\n    if(status === \"finished\"){\n      setWords(createWords());\n      setCurrentWordIndex(0);\n      setCorrectWord(0);\n      setIncorrectWord(0);\n      setCurrentCharIndex(-1);\n      setCurrentChar(\"\");\n      setNumberOfChar(0);\n      setRunningTime(0);\n    }\n    if(status !== \"started\"){\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCount((prevCount) => {\n          if(prevCount === 0){\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrentValue(\"\");\n            setNumberOfTest(numberOfTest + 1);\n            return time;\n          }\n          else{\n            return prevCount - 1;\n          }\n        })\n      },1000)\n    }\n  }\n\n  const handleKeyUpdate = ({key, keyCode}) => {\n    if(keyCode === 32){\n      checkWord();\n      setCurrentValue(\"\");\n      setCurrentWordIndex(currentWordIndex + 1);\n      setCurrentCharIndex(-1);\n    }\n    else if (keyCode === 8) {\n      setCurrentCharIndex(currentCharIndex - 1);\n      setCurrentChar(\"\");\n      setNumberOfChar(numberOfChar - 1);\n    } else {\n      setCurrentCharIndex(currentCharIndex + 1);\n      setCurrentChar(key);\n      setNumberOfChar(numberOfChar + 1);\n      setRunningTime(((10-count)/10));\n    }\n  }\n  const checkWord = () => {\n    if(words[currentWordIndex] === currentValue.trim()){\n      setCorrectEntity([...correctEntity,words[currentWordIndex]]);\n      setCorrectWord(correctWord + 1);\n      setCurrentResult({ correctWords:correctWord+1, inCorrectWords:incorrectWord, WPM:wpm(numberOfChar,runningTime), Accuracy:accuracy(correctWord+1,incorrectWord)});\n    }\n    else{\n      setIncorrectWord(incorrectWord + 1);\n      setCurrentResult({ correctWords:correctWord, inCorrectWords:incorrectWord+1, WPM:wpm(numberOfChar,runningTime), Accuracy:accuracy(correctWord,incorrectWord+1)});\n    }\n  }\n  const charArray = correctEntity.map((word) => {\n    return word.split('').reduce((total, letter) => {\n      total[letter] ? total[letter]++ : total[letter] = 1;\n      return total;\n    }, correctEntry);\n  })\n  const setCharClass = (wordIndex,charIndex,char) => {\n    if(wordIndex === currentWordIndex && charIndex === currentCharIndex && currentChar && status !== 'finished'){\n      return (char === currentChar) ? (\n          \"correct-word\"\n      ) : (\n          \"incorrect-word\"\n      )\n    }\n    else if(wordIndex === currentWordIndex && currentCharIndex >= words[currentWordIndex].length){\n      return \"incorrect-word\";\n    }\n    else{\n      return \"\";\n    }\n  }\n\n  const modalHandleSubmit = () => {\n    toggle();\n    setProfile(profile);\n  }\n  const modalInputChange = (event) => {\n    setProfile(event.target.value);\n  }\n  const totalCorrectWords = info.reduce((sum,result) => {\n    sum += result.correctWords ;\n    return sum;\n  }, 0);\n  const totalIncorrectWords = info.reduce((sum,result) => {\n    sum += result.inCorrectWords ;\n    return sum;\n  }, 0);\n  const sumOfWpm = info.reduce((sum,result) => {\n    sum += result.WPM ;\n    return sum;\n  }, 0);\n  const sumOfAccuracy = info.reduce((sum,result) => {\n    sum += result.Accuracy ;\n    return sum;\n  }, 0);\n  const averageWpm = (numberOfTest === 0) ? ( 0 ) : ( Math.round(sumOfWpm / numberOfTest));\n  const averageAccuracy = (numberOfTest === 0) ? ( 0 ) : ( Math.round(sumOfAccuracy / numberOfTest));\n  return (\n    <section className=\"App\">\n      <Modal\n          isShowing={isShowing}\n          modalHandleSubmit={modalHandleSubmit}\n          modalInputChange={modalInputChange}\n          profileName={profile}\n      />\n      <Navbar profileName={profile}/>\n      <div>\n        <TextBox\n            count={count}\n            textInput={textInput}\n            handleKeyUpdate={handleKeyUpdate}\n            status={status}\n            currentValue={currentValue}\n            setCurrentValue={setCurrentValue}\n            countDownStart={countDownStart}\n            words={words}\n            setCharClass={setCharClass}\n        />\n        <ResultBox\n            correctWord={correctWord}\n            incorrectWord={incorrectWord}\n            currentResult={currentResult}\n            averageWpm={averageWpm}\n        />\n      </div>\n      <Sidebar profileName={profile}\n               info={info}\n               gamePlayed={numberOfTest}\n               correctWord={totalCorrectWords}\n               incorrectWord={totalIncorrectWords}\n               correctChar={correctChar}\n               averageWpm={averageWpm}\n               averageAccuracy={averageAccuracy}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}